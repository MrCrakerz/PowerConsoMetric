{% extends 'base.html.twig' %}

{% block title %}Hello UploadController!{% endblock %}

{% block body %}
<style>
    .example-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; }
    .example-wrapper code { background: #F5F5F5; padding: 2px 6px; }
</style>

<head>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
  <script>
  var tableauMoyenne = {};
  var compteurMoyenne = 0;
  var compteurMesureMoyenneActuelle = 1;
  {%set mesurePrec = ''%}
  var nomFonctionPrec='';
  var mesureTotale = 0;
  var derniereMesure = 0;
  var boolPremiereMesure =0;
  var premiereMesure =0;
  var différenceTmps=0;
  var consoTotale;

  google.charts.load('current', {packages: ['corechart', 'line']});
  google.charts.setOnLoadCallback(drawBackgroundColor)

  function timeConverter(UNIX_timestamp){
    var a = new Date(UNIX_timestamp * 1000);
    var hour = a.getHours();
    var min = a.getMinutes();
    var sec = a.getSeconds();
    var time = hour + ':' + min + ':' + sec ;
    return time;
  }


function drawBackgroundColor()
{
      var data = new google.visualization.DataTable();
      data.addColumn('string', 'X');
      data.addColumn('number', 'Consommation');

      data.addRows([
          {%for mesure in tableauHote%}
        [timeConverter({{mesure.date}}),Math.pow(10,-6)*{{mesure.conso}}],
        {%endfor%}
      ]);
      compteurHost = 0;
      mesureTotale=0;
      {%for mesure in tableauHote%}
      mesureTotale = mesureTotale + {{mesure.conso}}*Math.pow(10,-6);
      compteurHost ++;
    {%endfor%}
    //mesureTotale = mesureToale*Math.pow(10,-3);
    moyenneHost = mesureTotale/compteurHost;
    document.getElementById("hostConsoMoyenne").innerHTML = moyenneHost;

      var options = {
        hAxis: {
          title: 'Time'
        },
        vAxis: {
          title: 'Puissance (watts)'
        },
        backgroundColor: '#f1f8e9'
      };

      var chart = new google.visualization.LineChart(document.getElementById('chart_div'));
      chart.draw(data, options);
}

function determinerAffichage (nomMesure, consoMesure, dateMesure)
      {
        if (nomFonctionPrec=="")
        {
          nomFonctionPrec=nomMesure;
        }
        if(nomMesure==nomFonctionPrec)
        {
          if(boolPremiereMesure==0)
          {
            premiereMesure=dateMesure;
            boolPremiereMesure=1;
            compteurMoyenne=1;
          }
          else {
            derniereMesure = dateMesure;
            compteurMoyenne++;
          }
          mesureTotale= mesureTotale + consoMesure;

        }
        else {
                //tmps en millisecondes
                différenceTmps = (derniereMesure-premiereMesure);

                if (différenceTmps>0)
                {
                  //alert (différenceTmps);
                  //mesure totale en watts
                  mesureTotale = mesureTotale*Math.pow(10,-6);
                  //tmps en heures
                  différenceTmps = Math.round(différenceTmps*Math.pow(2.7778,-7));
                  //mesureTotale = Math.round(mesureTotale*10000)/10000;
                  //alert(nomFonctionPrec+" : "+mesureTotale+" "+différenceTmps);
                  consoTotale =mesureTotale*différenceTmps/compteurMoyenne;
                  //alert(consoTotale);
                  consoMoyenne= mesureTotale/compteurMoyenne;
                  //document.getElementById(nomFonctionPrec+'Moyenne').innerHTML = ("Moyenne de la consommation pour le processus " + nomFonctionPrec+" : " + consoMoyenne*Math.pow(10,3) +" Watts.");
                }

                if (consoTotale > 0)
                {
                  config = determinerVariables(nomFonctionPrec, consoTotale);
                  const myChart = new Chart (document.getElementById(nomFonctionPrec+'1'),config);
                  document.getElementById(nomFonctionPrec+'Label').innerHTML = ("Moyenne de la consommation pour le processus " + nomFonctionPrec+" : ");
                    document.getElementById(nomFonctionPrec+'Moyenne').innerHTML = (consoMoyenne*Math.pow(10,3));
                }
                else
                {
                  //document.getElementById(nomFonctionPrec+'Label').innerHTML = ("Pas de mesures significatives pour le processus : " + nomFonctionPrec);
                  document.getElementById(nomFonctionPrec).remove();
                }

              compteurMesureMoyenneActuelle;
              compteurMoyenne = 0 ;
              nomFonctionPrec=nomMesure;
              mesureTotale = 0;
              derniereMesure = 0;
              boolPremiereMesure =0;
              premiereMesure =0;
              différenceTmps=0;
          }

        }
function determinerVariables (nomAppli,consoAppli)
  {

  if (consoAppli<1)
  {
    grandeur = "MilliWattsHeure"
    consoAppli = consoAppli*1000;

  }
  else if (consoAppli > 1000) {

      grandeur = "KiloWattsHeure"
      consoAppli = consoAppli/1000;
    }
    else {
      grandeur = "WattsHeure"
    }

    const data = {
      labels: [grandeur],
      datasets: [{
        label: nomAppli,
        data: [consoAppli],
        backgroundColor: [
          'rgba(255, 99, 132, 0.2)'
        ],
        borderColor: [
          'rgb(255, 99, 132)'
        ],
        borderWidth: 1
      }]
    };

    const config = {
    type: 'bar',
    data: data,
    options: {
      scales: {
        y: {
          beginAtZero: true
          }
        }
      },
  };
  return config;
  }
function calculerExportationHote()
{
  valeurMoyenne = Number(document.getElementById('hostConsoMoyenne').textContent);
  //alert ('valMoy : ' + valeurMoyenne);
  valeurMoyenne = valeurMoyenne*Math.pow(10,-3);
  nbHeure = document.getElementById('heures').value;
  //alert ('nbHeure : ' + nbHeure);
  nbJours = document.getElementById('nbJours').value;
  //alert (' nbJours ' + nbJours);
  valExport = valeurMoyenne * nbHeure * nbJours;
  valExport= Math.round(valExport*Math.pow(10,6))*Math.pow(10,-6);
  //alert (' ValeExpor : ' + valExport);
  document.getElementById('resultat').innerHTML=valExport;
  document.getElementById('grandeur').innerHTML="wH";
}
function calculerExportationConsu(nom)
{
  //alert(document.getElementById(nom+'Moyenne').textContent);
  valeurMoyenne = Number(document.getElementById(nom+'Moyenne').textContent);
  //alert ('valMoy : ' + valeurMoyenne);
  valeurMoyenne = valeurMoyenne*Math.pow(10,-3);
  nbHeure = document.getElementById(nom+'Heures').value;
  //alert ('nbHeure : ' + nbHeure);
  nbJours = document.getElementById(nom+'NbJours').value;
  //alert (' nbJours ' + nbJours);
  valExport = valeurMoyenne * nbHeure * nbJours;
  valExport= Math.round(valExport*Math.pow(10,6))*Math.pow(10,-6);
  //alert (' ValeExpor : ' + valExport);
  document.getElementById(nom+'Resultat').innerHTML=valExport;
  document.getElementById(nom+'Grandeur').innerHTML="MilliWattsHeures";
}
function calculerComparaison(valeur)
{
  valeurExportee = Number(document.getElementById('resultat').textContent);
  //alert ( valeurExportee);
  if (valeur == "velo")
  {
   tempsAlimenterVelo = valeurExportee*14.4/0.3;
  distanceParcourueVelo = Math.round(tempsAlimenterVelo/3600*15);
   if (tempsAlimenterVelo > 3600)
   {
     tempsAlimenterVelo = tempsAlimenterVelo / 3600;
     document.getElementById('comparaison').innerHTML=("Cette consommation est égale à l'énergie nécessaire pour alimenter un vélo durant environ "+Math.round(tempsAlimenterVelo)+" heures et faire "+distanceParcourueVelo+" km.");

   }
   else if (tempsAlimenterVelo > 60)
   {
     tempsAlimenterVelo = tempsAlimenterVelo/60;
     document.getElementById('comparaison').innerHTML=("Cette consommation est égale à l'énergie nécessaire pour alimenter un vélo durant environ "+Math.round(tempsAlimenterVelo)+" minutes et faire "+distanceParcourueVelo+" km.");

   }
   else {
     alert (tempsAlimenterVelo);
     document.getElementById('comparaison').innerHTML=("Cette consommation est égale à l'énergie nécessaire pour alimenter un vélo durant environ "+Math.round(tempsAlimenterVelo)+" secondes.");
   }
  }
  else if (valeur=="coeur") {
    tempsAlimenterVelo = valeurExportee*9/0.3;
    if (tempsAlimenterVelo > 1440)
    {
      tempsAlimenterVelo = tempsAlimenterVelo / 1440;
      document.getElementById('comparaison').innerHTML=("Cette consommation est égale à l'énergie utilisée par un coeur pour battre environ "+Math.round(tempsAlimenterVelo)+" jours.");

    }
    else if (tempsAlimenterVelo > 60)
    {
      tempsAlimenterVelo = tempsAlimenterVelo/60;
      document.getElementById('comparaison').innerHTML=("Cette consommation est égale à l'énergie utilisée par un coeur pour battre environ "+Math.round(tempsAlimenterVelo)+" heures.");


    }
    else {
      alert (tempsAlimenterVelo);
      document.getElementById('comparaison').innerHTML=("Cette consommation est égale à l'énergie utilisée par un coeur pour battre environ "+Math.round(tempsAlimenterVelo)+" minutes.");

    }
  }
  /*else if (valeur=="voiture") {
    tempsAlimenterVelo = valeurExportee*Math.pow(10,-3)/8500;
    distanceVoiture = tempsAlimenterVelo * 50;
    alert (tempsAlimenterVelo);
  }*/
}
function calculerComparaisonConsu(valeur, nom)
{
  valeurExportee = Number(document.getElementById(nom+'Resultat').textContent);
  alert ( valeurExportee);
  if (valeur == "velo")
  {
   tempsAlimenterVelo = valeurExportee*Math.pow(10,-3)*14.4/0.3;
   distanceParcourueVelo = Math.round(tempsAlimenterVelo/3600*15);
   labelResultat = document.getElementById(nom+'Comparaison');
   if (tempsAlimenterVelo > 3600)
   {
     tempsAlimenterVelo = tempsAlimenterVelo / 3600;
     tempsAlimenterVelo =Math.round(tempsAlimenterVelo);
     labelResultat.innerHTML=("Cette consommation est égale à l'énergie nécessaire pour alimenter un vélo durant environ "+Math.round(tempsAlimenterVelo)+" heures et faire "+distanceParcourueVelo+" km.");

   }
   else if (tempsAlimenterVelo > 60)
   {
     tempsAlimenterVelo = tempsAlimenterVelo/60;
     labelResultat.innerHTML=("Cette consommation est égale à l'énergie nécessaire pour alimenter un vélo durant environ "+Math.round(tempsAlimenterVelo)+" minutes et faire "+distanceParcourueVelo+" km.");
     tempsAlimenterVelo =Math.round(tempsAlimenterVelo);

   }
   else {
     //alert (tempsAlimenterVelo);
     labelResultat.innerHTML=("Cette consommation est égale à l'énergie nécessaire pour alimenter un vélo durant environ "+Math.round(tempsAlimenterVelo)+" secondes.");
     tempsAlimenterVelo =Math.round(tempsAlimenterVelo);
   }
  }
  else if (valeur=="coeur") {
    tempsAlimenterVelo = valeurExportee*Math.pow(10,-3)*9/0.3;
    if (tempsAlimenterVelo > 1440)
    {
      tempsAlimenterVelo = tempsAlimenterVelo / 1440;
      tempsAlimenterVelo =Math.round(tempsAlimenterVelo);
      labelResultat.innerHTML=("Cette consommation est égale à l'énergie utilisée par un coeur pour battre environ "+Math.round(tempsAlimenterVelo)+" jours.");

    }
    else if (tempsAlimenterVelo > 60)
    {
      tempsAlimenterVelo = tempsAlimenterVelo/60;
      labelResultat.innerHTML=("Cette consommation est égale à l'énergie utilisée par un coeur pour battre environ "+Math.round(tempsAlimenterVelo)+" heures.");
      tempsAlimenterVelo =Math.round(tempsAlimenterVelo);

    }
    else {
      alert (tempsAlimenterVelo);
      labelResultat.innerHTML=("Cette consommation est égale à l'énergie utilisée par un coeur pour battre environ "+Math.round(tempsAlimenterVelo)+" minutes.");
      tempsAlimenterVelo =Math.round(tempsAlimenterVelo);
    }
  }
  /*else if (valeur=="voiture") {
    tempsAlimenterVelo = valeurExportee*Math.pow(10,-3)/8500;
    distanceVoiture = tempsAlimenterVelo * 50;
    alert (distanceVoiture);
    if (tempsAlimenterVelo > 1440)
    {
      tempsAlimenterVelo = tempsAlimenterVelo / 1440;
      tempsAlimenterVelo =Math.round(tempsAlimenterVelo);
      labelResultat.innerHTML=("Cette consommation est égale à l'énergie utilisée par un coeur pour battre environ "+Math.round(tempsAlimenterVelo)+" jours.");

    }
    else if (tempsAlimenterVelo > 60)
    {
      tempsAlimenterVelo = tempsAlimenterVelo/60;
      labelResultat.innerHTML=("Cette consommation est égale à l'énergie utilisée par un coeur pour battre environ "+Math.round(tempsAlimenterVelo)+" heures.");
      tempsAlimenterVelo =Math.round(tempsAlimenterVelo);

    }
    else {
      alert (tempsAlimenterVelo);
      labelResultat.innerHTML=("Cette consommation est égale à l'énergie utilisée par un coeur pour battre environ "+Math.round(tempsAlimenterVelo)+" minutes.");
      tempsAlimenterVelo =Math.round(tempsAlimenterVelo);
    }
  }*/
}
  </script>

</head>
<body>
  <form id = "hostFormulaire">
    <div id="chart_div"class="example-wrapper">
    </div>
    <center>
      <label> Moyenne de la consommation instantané globale : </label>
      <label type=number id="hostConsoMoyenne"></label>
      <label> Watts </label> <br>
      <label> Exportation :     Nombre d'heures par jour </label>
      <input type="number" id="heures">
      <label>  Sur : </label>
      <input type="number" id="nbJours">
      <label>  par an.   </label><br>
      <input type = 'button' value="calculer" onclick= "calculerExportationHote()">
      <br>
      <label> Resultat : </label>
      <label id="resultat"></label>
      <label id="grandeur"></label><br>
      <label> Comparer la consommation avec : </label>
      <select onChange="calculerComparaison(this.value)">
        <option value="velo">Temps et distance parcourue en vélo</option>
        <option value="coeur"> Temps et nombre de battements d'un coeur</option>
        <!-- <option value="voiture">Temps et distance parcourue en voiture</option> -->
      </select>
      <label id ="comparaison"></label><br>
    </center>
  </form>
    {% for mesure in tableauFinal %}
      {% if mesure.name != mesurePrec %}
      <div id={{mesure.name}} >
        <canvas id="{{mesure.name}}1" ></canvas>
        <center>
          <label id="{{mesure.name}}Label"></label>
          <label id="{{mesure.name}}Moyenne"></label>
          <label> MilliWatts </label> <br>
          <label> Exportation :     Nombre d'heures par jour </label>
          <input type="number" id="{{mesure.name}}Heures">
          <label>  Sur : </label>
          <input type="number" id="{{mesure.name}}NbJours">
          <label>  par an.    </label>
          <input type = "button" value="calculer" onclick= "calculerExportationConsu('{{mesure.name}}')">
          <label id="{{mesure.name}}Resultat"></label>
          <label id="{{mesure.name}}Grandeur"></label><br>
          <label> Comparer la consommation avec : </label>
          <select onChange=calculerComparaisonConsu(this.value,"{{mesure.name}}")>
            <option value="velo">Temps et distance parcourue en vélo</option>
            <option value="coeur"> Temps et nombre de battements d'un coeur</option>
          </select>
          <label id ="{{mesure.name}}Comparaison"></label><br>
        </center>
      </div>
        {% set mesurePrec = mesure.name %}
      {% endif %}
    <script>
      determinerAffichage("{{mesure.name}}",{{mesure.conso}}, {{mesure.heure}});
    </script>
    {% endfor %}
</body>
{% endblock %}
