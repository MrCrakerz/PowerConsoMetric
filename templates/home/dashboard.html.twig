{% extends 'base.html.twig' %}

{% block title %}Hello UploadController!{% endblock %}

{% block body %}
<style>
    .example-wrapper { margin: 1em auto; max-width: 800px; width: 95%; font: 18px/1.5 sans-serif; }
    .example-wrapper code { background: #F5F5F5; padding: 2px 6px; }
</style>

<head>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
  <script>
  {%set mesurePrec = ''%}
  var nomFonctionPrec='';
  var mesureTotale = 0;
  var derniereMesure = 0;
  var boolPremiereMesure =0;
  var premiereMesure =0;
  var différenceTmps=0;
  var consoTotale;

  google.charts.load('current', {packages: ['corechart', 'line']});
  google.charts.setOnLoadCallback(drawBackgroundColor)


  function timeConverter(UNIX_timestamp){
    var a = new Date(UNIX_timestamp * 1000);
    var hour = a.getHours();
    var min = a.getMinutes();
    var sec = a.getSeconds();
    var time = hour + ':' + min + ':' + sec ;
    return time;
  }

/*  function drawChart(nomMesure, consoMesure)
   {
            // Define the chart to be drawn.
            var data = google.visualization.arrayToDataTable([
               ['Year', 'Asia'],
               ['2012',  900],
               ['2013',  1000],
               ['2014',  1170],
               ['2015',  1250],
               ['2016',  1530]
            ]);

            var options = {title: 'Population (in millions)'};

            // Instantiate and draw the chart.
            var chart = new google.visualization.ColumnChart(document.getElementById(nomMesure));
            chart.draw(data, options);
         }

         google.charts.setOnLoadCallback(drawChart);
*/

function drawBackgroundColor()
{
      var data = new google.visualization.DataTable();
      data.addColumn('string', 'X');
      data.addColumn('number', 'Dogs');

      data.addRows([
          {%for mesure in tableauHote%}
        [timeConverter({{mesure.date}}),Math.pow(10,-6)*{{mesure.conso}}],
        {%endfor%}
      ]);

      var options = {
        hAxis: {
          title: 'Time'
        },
        vAxis: {
          title: 'Puissance (watts)'
        },
        backgroundColor: '#f1f8e9'
      };

      var chart = new google.visualization.LineChart(document.getElementById('chart_div'));
      chart.draw(data, options);
}

function determinerAffichage (nomMesure, consoMesure, dateMesure)
      {
        if (nomFonctionPrec=="")
        {
          nomFonctionPrec=nomMesure;
        }
        if(nomMesure==nomFonctionPrec)
        {
          if(boolPremiereMesure==0)
          {
            premiereMesure=dateMesure;
            boolPremiereMesure=1;
          }
          else {
            derniereMesure = dateMesure;
          }
          mesureTotale= mesureTotale + consoMesure;

        }
        else {

                différenceTmps = (derniereMesure-premiereMesure);
                mesureTotale = mesureTotale*Math.pow(10,-6);
                //mesureTotale = Math.round(mesureTotale*10000)/10000;
                //alert(nomFonctionPrec+" : "+mesureTotale+" "+différenceTmps);

                consoTotale =mesureTotale*Math.pow(10,-6)*différenceTmps;
                if (consoTotale > 0)
                {
                  config = determinerVariables(nomFonctionPrec, consoTotale);
                  const myChart = new Chart (document.getElementById(nomFonctionPrec+'1'),config);
                }
                else
                {
                  document.getElementById(nomFonctionPrec+'Label').innerHTML = ("Pas de mesures significatives pour le processus : " + nomFonctionPrec);
                }


              nomFonctionPrec=nomMesure;
              mesureTotale = 0;
              derniereMesure = 0;
              boolPremiereMesure =0;
              premiereMesure =0;
              différenceTmps=0;
          }
        }
function determinerVariables (nomAppli,consoAppli)
{

if (consoAppli<100)
{
  if(consoAppli < 1)
  {
    grandeur = "MicroWattsHeure"
    consoAppli = consoAppli*1000000;
  }
  else
  {
    grandeur = "MilliWattsHeure"
    consoAppli = consoAppli*1000;
  }

}

const data = {
  labels: ["WattsHeure"],
  datasets: [{
    label: nomAppli,
    data: [consoAppli],
    backgroundColor: [
      'rgba(255, 99, 132, 0.2)'
    ],
    borderColor: [
      'rgb(255, 99, 132)'
    ],
    borderWidth: 1
  }]
};

const config = {
type: 'bar',
data: data,
options: {
  scales: {
    y: {
      beginAtZero: true
      }
    }
  },
};
return config;
}

  </script>

</head>
<body>
  <div id="chart_div"class="example-wrapper">
  </div>
  <div id="container">
  </div>
  {% for mesure in tableauFinal %}

  {% if mesure.name != mesurePrec %}
  <div id={{mesure.name}}>
    <canvas id="{{mesure.name}}1"></canvas>
    <label id="{{mesure.name}}Label">
  </div>
  {% set mesurePrec = mesure.name %}
  {% endif %}


  <script>
    determinerAffichage("{{mesure.name}}",{{mesure.conso}}, {{mesure.heure}});
  </script>
  {% endfor %}

</body>
{% endblock %}
